// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/PUDDLEEE/puddleee_back/ent/category"
	"github.com/PUDDLEEE/puddleee_back/ent/room"
	"github.com/PUDDLEEE/puddleee_back/ent/user"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// IsCompleted holds the value of the "is_completed" field.
	IsCompleted bool `json:"is_completed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges          RoomEdges `json:"edges"`
	category_rooms *int
	user_own_rooms *int
	selectValues   sql.SelectValues
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// Questioner holds the value of the questioner edge.
	Questioner *User `json:"questioner,omitempty"`
	// Respondent holds the value of the respondent edge.
	Respondent []*User `json:"respondent,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// Views holds the value of the views edge.
	Views []*View `json:"views,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// QuestionerOrErr returns the Questioner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) QuestionerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Questioner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Questioner, nil
	}
	return nil, &NotLoadedError{edge: "questioner"}
}

// RespondentOrErr returns the Respondent value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) RespondentOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Respondent, nil
	}
	return nil, &NotLoadedError{edge: "respondent"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[2] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[3] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// ViewsOrErr returns the Views value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) ViewsOrErr() ([]*View, error) {
	if e.loadedTypes[4] {
		return e.Views, nil
	}
	return nil, &NotLoadedError{edge: "views"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case room.FieldIsCompleted:
			values[i] = new(sql.NullBool)
		case room.FieldID:
			values[i] = new(sql.NullInt64)
		case room.FieldTitle:
			values[i] = new(sql.NullString)
		case room.FieldCreateTime, room.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case room.ForeignKeys[0]: // category_rooms
			values[i] = new(sql.NullInt64)
		case room.ForeignKeys[1]: // user_own_rooms
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case room.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case room.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				r.CreateTime = value.Time
			}
		case room.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				r.UpdateTime = value.Time
			}
		case room.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				r.Title = value.String
			}
		case room.FieldIsCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_completed", values[i])
			} else if value.Valid {
				r.IsCompleted = value.Bool
			}
		case room.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field category_rooms", value)
			} else if value.Valid {
				r.category_rooms = new(int)
				*r.category_rooms = int(value.Int64)
			}
		case room.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_own_rooms", value)
			} else if value.Valid {
				r.user_own_rooms = new(int)
				*r.user_own_rooms = int(value.Int64)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Room.
// This includes values selected through modifiers, order, etc.
func (r *Room) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryQuestioner queries the "questioner" edge of the Room entity.
func (r *Room) QueryQuestioner() *UserQuery {
	return NewRoomClient(r.config).QueryQuestioner(r)
}

// QueryRespondent queries the "respondent" edge of the Room entity.
func (r *Room) QueryRespondent() *UserQuery {
	return NewRoomClient(r.config).QueryRespondent(r)
}

// QueryCategory queries the "category" edge of the Room entity.
func (r *Room) QueryCategory() *CategoryQuery {
	return NewRoomClient(r.config).QueryCategory(r)
}

// QueryMessages queries the "messages" edge of the Room entity.
func (r *Room) QueryMessages() *MessageQuery {
	return NewRoomClient(r.config).QueryMessages(r)
}

// QueryViews queries the "views" edge of the Room entity.
func (r *Room) QueryViews() *ViewQuery {
	return NewRoomClient(r.config).QueryViews(r)
}

// Update returns a builder for updating this Room.
// Note that you need to call Room.Unwrap() before calling this method if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return NewRoomClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Room entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("create_time=")
	builder.WriteString(r.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(r.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(r.Title)
	builder.WriteString(", ")
	builder.WriteString("is_completed=")
	builder.WriteString(fmt.Sprintf("%v", r.IsCompleted))
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room
