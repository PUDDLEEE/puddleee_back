// Code generated by ent, DO NOT EDIT.

package room

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldIsCompleted holds the string denoting the is_completed field in the database.
	FieldIsCompleted = "is_completed"
	// EdgeQuestioner holds the string denoting the questioner edge name in mutations.
	EdgeQuestioner = "questioner"
	// EdgeRespondent holds the string denoting the respondent edge name in mutations.
	EdgeRespondent = "respondent"
	// EdgeMessage holds the string denoting the message edge name in mutations.
	EdgeMessage = "message"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// QuestionerTable is the table that holds the questioner relation/edge.
	QuestionerTable = "rooms"
	// QuestionerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	QuestionerInverseTable = "users"
	// QuestionerColumn is the table column denoting the questioner relation/edge.
	QuestionerColumn = "user_own_rooms"
	// RespondentTable is the table that holds the respondent relation/edge. The primary key declared below.
	RespondentTable = "user_participant_rooms"
	// RespondentInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RespondentInverseTable = "users"
	// MessageTable is the table that holds the message relation/edge.
	MessageTable = "messages"
	// MessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessageInverseTable = "messages"
	// MessageColumn is the table column denoting the message relation/edge.
	MessageColumn = "message_room"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldIsCompleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rooms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_own_rooms",
}

var (
	// RespondentPrimaryKey and RespondentColumn2 are the table columns denoting the
	// primary key for the respondent relation (M2M).
	RespondentPrimaryKey = []string{"user_id", "room_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultIsCompleted holds the default value on creation for the "is_completed" field.
	DefaultIsCompleted bool
)

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByIsCompleted orders the results by the is_completed field.
func ByIsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCompleted, opts...).ToFunc()
}

// ByQuestionerField orders the results by questioner field.
func ByQuestionerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionerStep(), sql.OrderByField(field, opts...))
	}
}

// ByRespondentCount orders the results by respondent count.
func ByRespondentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRespondentStep(), opts...)
	}
}

// ByRespondent orders the results by respondent terms.
func ByRespondent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRespondentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMessageCount orders the results by message count.
func ByMessageCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessageStep(), opts...)
	}
}

// ByMessage orders the results by message terms.
func ByMessage(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuestionerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionerTable, QuestionerColumn),
	)
}
func newRespondentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RespondentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RespondentTable, RespondentPrimaryKey...),
	)
}
func newMessageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MessageTable, MessageColumn),
	)
}
