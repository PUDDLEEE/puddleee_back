// Code generated by ent, DO NOT EDIT.

package room

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the room type in the database.
	Label = "room"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldIsCompleted holds the string denoting the is_completed field in the database.
	FieldIsCompleted = "is_completed"
	// EdgeQuestioner holds the string denoting the questioner edge name in mutations.
	EdgeQuestioner = "questioner"
	// EdgeRespondent holds the string denoting the respondent edge name in mutations.
	EdgeRespondent = "respondent"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeMessages holds the string denoting the messages edge name in mutations.
	EdgeMessages = "messages"
	// EdgeViews holds the string denoting the views edge name in mutations.
	EdgeViews = "views"
	// Table holds the table name of the room in the database.
	Table = "rooms"
	// QuestionerTable is the table that holds the questioner relation/edge.
	QuestionerTable = "rooms"
	// QuestionerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	QuestionerInverseTable = "users"
	// QuestionerColumn is the table column denoting the questioner relation/edge.
	QuestionerColumn = "user_own_rooms"
	// RespondentTable is the table that holds the respondent relation/edge. The primary key declared below.
	RespondentTable = "user_participant_rooms"
	// RespondentInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RespondentInverseTable = "users"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "rooms"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_rooms"
	// MessagesTable is the table that holds the messages relation/edge. The primary key declared below.
	MessagesTable = "room_messages"
	// MessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessagesInverseTable = "messages"
	// ViewsTable is the table that holds the views relation/edge.
	ViewsTable = "views"
	// ViewsInverseTable is the table name for the View entity.
	// It exists in this package in order to avoid circular dependency with the "view" package.
	ViewsInverseTable = "views"
	// ViewsColumn is the table column denoting the views relation/edge.
	ViewsColumn = "room_views"
)

// Columns holds all SQL columns for room fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTitle,
	FieldIsCompleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "rooms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_rooms",
	"user_own_rooms",
}

var (
	// RespondentPrimaryKey and RespondentColumn2 are the table columns denoting the
	// primary key for the respondent relation (M2M).
	RespondentPrimaryKey = []string{"user_id", "room_id"}
	// MessagesPrimaryKey and MessagesColumn2 are the table columns denoting the
	// primary key for the messages relation (M2M).
	MessagesPrimaryKey = []string{"room_id", "message_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultIsCompleted holds the default value on creation for the "is_completed" field.
	DefaultIsCompleted bool
)

// OrderOption defines the ordering options for the Room queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByIsCompleted orders the results by the is_completed field.
func ByIsCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCompleted, opts...).ToFunc()
}

// ByQuestionerField orders the results by questioner field.
func ByQuestionerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionerStep(), sql.OrderByField(field, opts...))
	}
}

// ByRespondentCount orders the results by respondent count.
func ByRespondentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRespondentStep(), opts...)
	}
}

// ByRespondent orders the results by respondent terms.
func ByRespondent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRespondentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessagesCount orders the results by messages count.
func ByMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMessagesStep(), opts...)
	}
}

// ByMessages orders the results by messages terms.
func ByMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByViewsCount orders the results by views count.
func ByViewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newViewsStep(), opts...)
	}
}

// ByViews orders the results by views terms.
func ByViews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newViewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuestionerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuestionerTable, QuestionerColumn),
	)
}
func newRespondentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RespondentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RespondentTable, RespondentPrimaryKey...),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
func newMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MessagesTable, MessagesPrimaryKey...),
	)
}
func newViewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ViewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ViewsTable, ViewsColumn),
	)
}
