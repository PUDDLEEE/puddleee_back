// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/PUDDLEEE/puddleee_back/ent/verification"
	"github.com/google/uuid"
)

// VerificationCreate is the builder for creating a Verification entity.
type VerificationCreate struct {
	config
	mutation *VerificationMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (vc *VerificationCreate) SetCreateTime(t time.Time) *VerificationCreate {
	vc.mutation.SetCreateTime(t)
	return vc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableCreateTime(t *time.Time) *VerificationCreate {
	if t != nil {
		vc.SetCreateTime(*t)
	}
	return vc
}

// SetUpdateTime sets the "update_time" field.
func (vc *VerificationCreate) SetUpdateTime(t time.Time) *VerificationCreate {
	vc.mutation.SetUpdateTime(t)
	return vc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableUpdateTime(t *time.Time) *VerificationCreate {
	if t != nil {
		vc.SetUpdateTime(*t)
	}
	return vc
}

// SetUUID sets the "uuid" field.
func (vc *VerificationCreate) SetUUID(u uuid.UUID) *VerificationCreate {
	vc.mutation.SetUUID(u)
	return vc
}

// SetCode sets the "code" field.
func (vc *VerificationCreate) SetCode(s string) *VerificationCreate {
	vc.mutation.SetCode(s)
	return vc
}

// SetExpiredAt sets the "expired_at" field.
func (vc *VerificationCreate) SetExpiredAt(t time.Time) *VerificationCreate {
	vc.mutation.SetExpiredAt(t)
	return vc
}

// SetNillableExpiredAt sets the "expired_at" field if the given value is not nil.
func (vc *VerificationCreate) SetNillableExpiredAt(t *time.Time) *VerificationCreate {
	if t != nil {
		vc.SetExpiredAt(*t)
	}
	return vc
}

// Mutation returns the VerificationMutation object of the builder.
func (vc *VerificationCreate) Mutation() *VerificationMutation {
	return vc.mutation
}

// Save creates the Verification in the database.
func (vc *VerificationCreate) Save(ctx context.Context) (*Verification, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VerificationCreate) SaveX(ctx context.Context) *Verification {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VerificationCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VerificationCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VerificationCreate) defaults() {
	if _, ok := vc.mutation.CreateTime(); !ok {
		v := verification.DefaultCreateTime()
		vc.mutation.SetCreateTime(v)
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		v := verification.DefaultUpdateTime()
		vc.mutation.SetUpdateTime(v)
	}
	if _, ok := vc.mutation.ExpiredAt(); !ok {
		v := verification.DefaultExpiredAt
		vc.mutation.SetExpiredAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VerificationCreate) check() error {
	if _, ok := vc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Verification.create_time"`)}
	}
	if _, ok := vc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Verification.update_time"`)}
	}
	if _, ok := vc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Verification.uuid"`)}
	}
	if _, ok := vc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Verification.code"`)}
	}
	if v, ok := vc.mutation.Code(); ok {
		if err := verification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Verification.code": %w`, err)}
		}
	}
	if _, ok := vc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New(`ent: missing required field "Verification.expired_at"`)}
	}
	return nil
}

func (vc *VerificationCreate) sqlSave(ctx context.Context) (*Verification, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VerificationCreate) createSpec() (*Verification, *sqlgraph.CreateSpec) {
	var (
		_node = &Verification{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(verification.Table, sqlgraph.NewFieldSpec(verification.FieldID, field.TypeInt))
	)
	if value, ok := vc.mutation.CreateTime(); ok {
		_spec.SetField(verification.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := vc.mutation.UpdateTime(); ok {
		_spec.SetField(verification.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := vc.mutation.UUID(); ok {
		_spec.SetField(verification.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := vc.mutation.Code(); ok {
		_spec.SetField(verification.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := vc.mutation.ExpiredAt(); ok {
		_spec.SetField(verification.FieldExpiredAt, field.TypeTime, value)
		_node.ExpiredAt = value
	}
	return _node, _spec
}

// VerificationCreateBulk is the builder for creating many Verification entities in bulk.
type VerificationCreateBulk struct {
	config
	err      error
	builders []*VerificationCreate
}

// Save creates the Verification entities in the database.
func (vcb *VerificationCreateBulk) Save(ctx context.Context) ([]*Verification, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Verification, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VerificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VerificationCreateBulk) SaveX(ctx context.Context) []*Verification {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VerificationCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VerificationCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
