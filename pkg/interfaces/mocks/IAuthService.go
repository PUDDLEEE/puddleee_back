// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	ent "github.com/PUDDLEEE/puddleee_back/ent"
	authdto "github.com/PUDDLEEE/puddleee_back/internal/auth/dto"

	mock "github.com/stretchr/testify/mock"

	userdto "github.com/PUDDLEEE/puddleee_back/internal/user/dto"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// CreateEmailVerification provides a mock function with given fields: _a0
func (_m *IAuthService) CreateEmailVerification(_a0 string) (*ent.Verification, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailVerification")
	}

	var r0 *ent.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*ent.Verification, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *ent.Verification); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Verification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmailVerification provides a mock function with given fields: _a0, _a1
func (_m *IAuthService) SendEmailVerification(_a0 string, _a1 *ent.Verification) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *ent.Verification) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signin provides a mock function with given fields: _a0
func (_m *IAuthService) Signin(_a0 authdto.SigninDTO) (*authdto.SigninOutputDTO, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Signin")
	}

	var r0 *authdto.SigninOutputDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(authdto.SigninDTO) (*authdto.SigninOutputDTO, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(authdto.SigninDTO) *authdto.SigninOutputDTO); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authdto.SigninOutputDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(authdto.SigninDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signup provides a mock function with given fields: _a0
func (_m *IAuthService) Signup(_a0 userdto.CreateUserDTO) (*ent.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(userdto.CreateUserDTO) (*ent.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(userdto.CreateUserDTO) *ent.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(userdto.CreateUserDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyEmailVerification provides a mock function with given fields: _a0, _a1
func (_m *IAuthService) VerifyEmailVerification(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmailVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
