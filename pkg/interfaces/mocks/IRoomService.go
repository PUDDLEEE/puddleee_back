// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	ent "github.com/PUDDLEEE/puddleee_back/ent"

	mock "github.com/stretchr/testify/mock"

	roomdto "github.com/PUDDLEEE/puddleee_back/internal/room/dto"
)

// IRoomService is an autogenerated mock type for the IRoomService type
type IRoomService struct {
	mock.Mock
}

// CreateRoom provides a mock function with given fields: _a0
func (_m *IRoomService) CreateRoom(_a0 roomdto.CreateRoomDTO) (*ent.Room, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoom")
	}

	var r0 *ent.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(roomdto.CreateRoomDTO) (*ent.Room, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(roomdto.CreateRoomDTO) *ent.Room); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(roomdto.CreateRoomDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoom provides a mock function with given fields: _a0
func (_m *IRoomService) DeleteRoom(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneRoom provides a mock function with given fields: _a0
func (_m *IRoomService) FindOneRoom(_a0 int) (*ent.Room, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindOneRoom")
	}

	var r0 *ent.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*ent.Room, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *ent.Room); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRoom provides a mock function with given fields:
func (_m *IRoomService) FindRoom() ([]*ent.Room, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindRoom")
	}

	var r0 []*ent.Room
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*ent.Room, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*ent.Room); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Room)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoom provides a mock function with given fields: _a0, _a1
func (_m *IRoomService) UpdateRoom(_a0 int, _a1 roomdto.UpdateRoomDTO) (*ent.Room, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoom")
	}

	var r0 *ent.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(int, roomdto.UpdateRoomDTO) (*ent.Room, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, roomdto.UpdateRoomDTO) *ent.Room); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(int, roomdto.UpdateRoomDTO) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRoomService creates a new instance of IRoomService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRoomService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRoomService {
	mock := &IRoomService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
