// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	ent "github.com/PUDDLEEE/puddleee_back/ent"
	dto "github.com/PUDDLEEE/puddleee_back/internal/user/dto"

	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *IUserService) CreateUser(_a0 dto.CreateUserDTO) (*ent.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateUserDTO) (*ent.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateUserDTO) *ent.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(dto.CreateUserDTO) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneUser provides a mock function with given fields: _a0
func (_m *IUserService) FindOneUser(_a0 int) (*ent.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FindOneUser")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*ent.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) *ent.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
